{"version":3,"file":"gorniv-ngx-transfer-http.js.map","sources":["ng://@gorniv/ngx-transfer-http/src/transfer-http.service.ts","ng://@gorniv/ngx-transfer-http/src/transfer-http.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n\n  }\n\n  public request(method: string, uri: string | Request, options?: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('get', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.get(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData('post', url, body, options, (url: string, body: any, options: any): Observable<any> => {\n      return this.httpClient.post(url, body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('put', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.put(url, options);\n    });\n  }\n\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('delete', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.delete(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData('patch', url, body, options, (url: string, body: any, options: any): Observable<any> => {\n      return this.httpClient.patch(url, body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('head', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.head(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('options', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.options(url, options);\n    });\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData(method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>): any {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + (options ? JSON.stringify(options) : '');\n\n    try {\n      return this.resolveData(key);\n    } catch (e) {\n      return callback(method, uri, options)\n        .pipe(tap(data => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache(key, data);\n          }\n        }));\n    }\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getPostData(method: string,\n    uri: string | Request,\n    body: any, options: any,\n    callback: (uri: string | Request, body: any, options: any) => Observable<Response>): any {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n\n    try {\n      return this.resolveData(key);\n    } catch (e) {\n      return callback(uri, body, options)\n        .pipe(tap(data => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache(key, data);\n          }\n        }));\n    }\n  }\n\n  private resolveData(key: any): any {\n    const data = this.getFromCache(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve(data));\n  }\n\n  private setCache(key, data): any {\n    return this.transferState.set(key, data);\n  }\n\n  private getFromCache(key): any {\n    return this.transferState.get(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService]\n})\nexport class TransferHttpModule {\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;IASE,YACY,aAA4B,EAC9B,YACqB;QAFnB,kBAAa,GAAb,aAAa,CAAe;QAC9B,eAAU,GAAV,UAAU;QACW,eAAU,GAAV,UAAU;KAGxC;;;;;;;IAEM,OAAO,CAAC,MAAc,EAAE,GAAqB,EAAE,OAYrD;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACtD,CAAC,CAAC;;;;;;;;IAML,GAAG,CAAC,GAAW,EAAE,OAWhB;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YACjF,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC1C,CAAC,CAAC;KACJ;;;;;;;;IAKD,IAAI,CAAC,GAAW,EAAE,IAAS,EAAE,OAW5B;;QAEC,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,GAAW,EAAE,IAAS,EAAE,OAAY;YACvF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACjD,CAAC,CAAC;KACJ;;;;;;;;IAKD,GAAG,CAAC,GAAW,EAAE,IAAS,EAAE,OAW3B;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YACjF,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC1C,CAAC,CAAC;KACJ;;;;;;;IAMD,MAAM,CAAC,GAAW,EAAE,OAWnB;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YACpF,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC7C,CAAC,CAAC;KACJ;;;;;;;;IAKD,KAAK,CAAC,GAAW,EAAE,IAAS,EAAE,OAW7B;;QAEC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,GAAW,EAAE,IAAS,EAAE,OAAY;YACxF,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ;;;;;;;IAKD,IAAI,CAAC,GAAW,EAAE,OAWjB;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC3C,CAAC,CAAC;KACJ;;;;;;;IAKD,OAAO,CAAC,GAAW,EAAE,OAWpB;;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,MAAc,EAAE,GAAW,EAAE,OAAY;YACrF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC9C,CAAC,CAAC;KACJ;;;;;;;;IAGO,OAAO,CAAC,MAAc,EAC5B,GAAqB,EACrB,OAAY,EACZ,QAAkF;QAElF,qBAAI,GAAG,GAAG,GAAG,CAAC;QAEd,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;SACf;QAED,uBAAM,GAAG,GAAG,GAAG,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAE3D,IAAI;YACF,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC9B;QAAC,wBAAO,CAAC,EAAE;YACV,OAAO,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC;iBAClC,IAAI,CAAC,GAAG,CAAC,IAAI;gBACZ,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAGvC;gBACD,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;iBAC1B;aACF,CAAC,CAAC,CAAC;SACP;;;;;;;;;;IAIK,WAAW,CAAC,MAAc,EAChC,GAAqB,EACrB,IAAS,EAAE,OAAY,EACvB,QAAkF;QAElF,qBAAI,GAAG,GAAG,GAAG,CAAC;QAEd,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;SACf;QAED,uBAAM,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAEhG,IAAI;YACF,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC9B;QAAC,wBAAO,CAAC,EAAE;YACV,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;iBAChC,IAAI,CAAC,GAAG,CAAC,IAAI;gBACZ,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAGvC;gBACD,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;iBAC1B;aACF,CAAC,CAAC,CAAC;SACP;;;;;;IAGK,WAAW,CAAC,GAAQ;QAC1B,uBAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,EAAE,CAAC;SACnB;QAED,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;;YAEtC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAChC;QACD,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAEtC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;IAG7B,QAAQ,CAAC,GAAG,EAAE,IAAI;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;;;;;IAGnC,YAAY,CAAC,GAAG;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;;;YApQ5C,UAAU;;;;YALF,aAAa;YADb,UAAU;yCAWd,MAAM,SAAC,WAAW;;;;;;;ACZvB;;;YAIC,QAAQ,SAAC;gBACR,SAAS,EAAE,CAAC,mBAAmB,CAAC;aACjC;;;;;;;;;;;;;;;;;;;;"}
