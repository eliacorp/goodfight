/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { TransferState } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
export class TransferHttpService {
    /**
     * @param {?} transferState
     * @param {?} httpClient
     * @param {?} platformId
     */
    constructor(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?=} options
     * @return {?}
     */
    request(method, uri, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, (method, url, options) => {
            return this.httpClient.request(method, url, options);
        });
    }
    /**
     * Performs a request with `get` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, (method, url, options) => {
            return this.httpClient.get(url, options);
        });
    }
    /**
     * Performs a request with `post` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    post(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, (url, body, options) => {
            return this.httpClient.post(url, body, options);
        });
    }
    /**
     * Performs a request with `put` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    put(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('put', url, options, (method, url, options) => {
            return this.httpClient.put(url, options);
        });
    }
    /**
     * Performs a request with `delete` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    delete(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, (method, url, options) => {
            return this.httpClient.delete(url, options);
        });
    }
    /**
     * Performs a request with `patch` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    patch(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, (url, body, options) => {
            return this.httpClient.patch(url, body, options);
        });
    }
    /**
     * Performs a request with `head` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    head(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, (method, url, options) => {
            return this.httpClient.head(url, options);
        });
    }
    /**
     * Performs a request with `options` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    options(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, (method, url, options) => {
            return this.httpClient.options(url, options);
        });
    }
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getData(method, uri, options, callback) {
        let /** @type {?} */ url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        const /** @type {?} */ key = url + (options ? JSON.stringify(options) : '');
        try {
            return this.resolveData(key);
        }
        catch (/** @type {?} */ e) {
            return callback(method, uri, options)
                .pipe(tap(data => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            }));
        }
    }
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?} body
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getPostData(method, uri, body, options, callback) {
        let /** @type {?} */ url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        const /** @type {?} */ key = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        try {
            return this.resolveData(key);
        }
        catch (/** @type {?} */ e) {
            return callback(uri, body, options)
                .pipe(tap(data => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            }));
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    resolveData(key) {
        const /** @type {?} */ data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) {
            // Server only code.
        }
        return from(Promise.resolve(data));
    }
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setCache(key, data) {
        return this.transferState.set(key, data);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getFromCache(key) {
        return this.transferState.get(key, null);
    }
}
TransferHttpService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TransferHttpService.ctorParameters = () => [
    { type: TransferState, },
    { type: HttpClient, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
function TransferHttpService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TransferHttpService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TransferHttpService.ctorParameters;
    /** @type {?} */
    TransferHttpService.prototype.transferState;
    /** @type {?} */
    TransferHttpService.prototype.httpClient;
    /** @type {?} */
    TransferHttpService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,