{"version":3,"file":"gorniv-ngx-transfer-http.js.map","sources":["ng://@gorniv/ngx-transfer-http/src/transfer-http.service.ts","ng://@gorniv/ngx-transfer-http/src/transfer-http.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) {}\n\n  request<T>(\n    method: string,\n    uri: string | Request,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request<T>(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('get', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.get<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'post',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any) => {\n        return this.httpClient.post<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put<T>(\n    url: string,\n    _body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>('put', url, _body, options, (_method: string, url: string, _body: any, options: any) => {\n      return this.httpClient.put<T>(url, _body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('delete', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.delete<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'patch',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any): Observable<any> => {\n        return this.httpClient.patch<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('head', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.head<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(\n      'options',\n      url,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, options: any) => {\n        return this.httpClient.options<T>(url, options);\n      },\n    );\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData<T>(\n    method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey = url + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(method, uri, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private getPostData<T>(\n    _method: string,\n    uri: string | Request,\n    body: any,\n    options: any,\n    callback: (method: string, uri: string | Request, body: any, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey =\n      url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(_method, uri, body, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private resolveData<T>(key: StateKey<T>): Observable<T> {\n    const data = this.getFromCache<T>(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve<T>(data));\n  }\n\n  private setCache<T>(key: StateKey<T>, data: T): void {\n    return this.transferState.set<T>(key, data);\n  }\n\n  private getFromCache<T>(key: StateKey<T>): T {\n    return this.transferState.get<T>(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService],\n})\nexport class TransferHttpModule {}\n"],"names":[],"mappings":"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"}
