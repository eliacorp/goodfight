import { Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { TransferState } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TransferHttpService = /** @class */ (function () {
    function TransferHttpService(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.request = /**
     * @param {?} method
     * @param {?} uri
     * @param {?=} options
     * @return {?}
     */
    function (method, uri, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, function (method, url, options) {
            return _this.httpClient.request(method, url, options);
        });
    };
    /**
     * Performs a request with `get` http method.
     */
    /**
     * Performs a request with `get` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.get = /**
     * Performs a request with `get` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, function (method, url, options) {
            return _this.httpClient.get(url, options);
        });
    };
    /**
     * Performs a request with `post` http method.
     */
    /**
     * Performs a request with `post` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.post = /**
     * Performs a request with `post` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, function (url, body, options) {
            return _this.httpClient.post(url, body, options);
        });
    };
    /**
     * Performs a request with `put` http method.
     */
    /**
     * Performs a request with `put` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.put = /**
     * Performs a request with `put` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('put', url, options, function (method, url, options) {
            return _this.httpClient.put(url, options);
        });
    };
    /**
     * Performs a request with `delete` http method.
     */
    /**
     * Performs a request with `delete` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.delete = /**
     * Performs a request with `delete` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, function (method, url, options) {
            return _this.httpClient.delete(url, options);
        });
    };
    /**
     * Performs a request with `patch` http method.
     */
    /**
     * Performs a request with `patch` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.patch = /**
     * Performs a request with `patch` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, function (url, body, options) {
            return _this.httpClient.patch(url, body, options);
        });
    };
    /**
     * Performs a request with `head` http method.
     */
    /**
     * Performs a request with `head` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.head = /**
     * Performs a request with `head` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, function (method, url, options) {
            return _this.httpClient.head(url, options);
        });
    };
    /**
     * Performs a request with `options` http method.
     */
    /**
     * Performs a request with `options` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    TransferHttpService.prototype.options = /**
     * Performs a request with `options` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, function (method, url, options) {
            return _this.httpClient.options(url, options);
        });
    };
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    TransferHttpService.prototype.getData = /**
     * @param {?} method
     * @param {?} uri
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    function (method, uri, options, callback) {
        var _this = this;
        var /** @type {?} */ url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        var /** @type {?} */ key = url + (options ? JSON.stringify(options) : '');
        try {
            return this.resolveData(key);
        }
        catch (/** @type {?} */ e) {
            return callback(method, uri, options)
                .pipe(tap(function (data) {
                if (isPlatformBrowser(_this.platformId)) ;
                if (isPlatformServer(_this.platformId)) {
                    _this.setCache(key, data);
                }
            }));
        }
    };
    /**
     * @param {?} method
     * @param {?} uri
     * @param {?} body
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    TransferHttpService.prototype.getPostData = /**
     * @param {?} method
     * @param {?} uri
     * @param {?} body
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    function (method, uri, body, options, callback) {
        var _this = this;
        var /** @type {?} */ url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        var /** @type {?} */ key = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        try {
            return this.resolveData(key);
        }
        catch (/** @type {?} */ e) {
            return callback(uri, body, options)
                .pipe(tap(function (data) {
                if (isPlatformBrowser(_this.platformId)) ;
                if (isPlatformServer(_this.platformId)) {
                    _this.setCache(key, data);
                }
            }));
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TransferHttpService.prototype.resolveData = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) ;
        return from(Promise.resolve(data));
    };
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    TransferHttpService.prototype.setCache = /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    function (key, data) {
        return this.transferState.set(key, data);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TransferHttpService.prototype.getFromCache = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.transferState.get(key, null);
    };
    TransferHttpService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TransferHttpService.ctorParameters = function () { return [
        { type: TransferState, },
        { type: HttpClient, },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    return TransferHttpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TransferHttpModule = /** @class */ (function () {
    function TransferHttpModule() {
    }
    TransferHttpModule.decorators = [
        { type: NgModule, args: [{
                    providers: [TransferHttpService]
                },] },
    ];
    return TransferHttpModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { TransferHttpModule, TransferHttpService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,