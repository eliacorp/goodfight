{"version":3,"sources":["ng://@gorniv/ngx-transfer-http/src/transfer-http.service.ts","ng://@gorniv/ngx-transfer-http/src/transfer-http.module.ts"],"names":["TransferHttpService","transferState","httpClient","platformId","this","prototype","request","method","uri","options","getData","url","_this","get","post","body","getPostData","put","delete","patch","head","callback","key","JSON","stringify","resolveData","e","pipe","tap","data","isPlatformBrowser","isPlatformServer","setCache","getFromCache","Error","remove","from","Promise","resolve","set","Injectable","TransferState","HttpClient","Inject","args","PLATFORM_ID","TransferHttpModule","NgModule","providers"],"mappings":"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","sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n\n  }\n\n  public request(method: string, uri: string | Request, options?: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('get', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.get(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData('post', url, body, options, (url: string, body: any, options: any): Observable<any> => {\n      return this.httpClient.post(url, body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('put', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.put(url, options);\n    });\n  }\n\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('delete', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.delete(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData('patch', url, body, options, (url: string, body: any, options: any): Observable<any> => {\n      return this.httpClient.patch(url, body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('head', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.head(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<any> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData('options', url, options, (method: string, url: string, options: any) => {\n      return this.httpClient.options(url, options);\n    });\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData(method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>): any {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + (options ? JSON.stringify(options) : '');\n\n    try {\n      return this.resolveData(key);\n    } catch (e) {\n      return callback(method, uri, options)\n        .pipe(tap(data => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache(key, data);\n          }\n        }));\n    }\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getPostData(method: string,\n    uri: string | Request,\n    body: any, options: any,\n    callback: (uri: string | Request, body: any, options: any) => Observable<Response>): any {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n\n    try {\n      return this.resolveData(key);\n    } catch (e) {\n      return callback(uri, body, options)\n        .pipe(tap(data => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache(key, data);\n          }\n        }));\n    }\n  }\n\n  private resolveData(key: any): any {\n    const data = this.getFromCache(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve(data));\n  }\n\n  private setCache(key, data): any {\n    return this.transferState.set(key, data);\n  }\n\n  private getFromCache(key): any {\n    return this.transferState.get(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService]\n})\nexport class TransferHttpModule {\n}\n"]}