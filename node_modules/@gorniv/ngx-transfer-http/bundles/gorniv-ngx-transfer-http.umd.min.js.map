{"version":3,"sources":["ng://@gorniv/ngx-transfer-http/src/transfer-http.service.ts","ng://@gorniv/ngx-transfer-http/src/transfer-http.module.ts"],"names":["TransferHttpService","transferState","httpClient","platformId","this","prototype","request","method","uri","options","_this","getData","url","get","_method","post","body","getPostData","put","_body","delete","patch","head","callback","tempKey","JSON","stringify","key","makeStateKey","resolveData","e","pipe","tap","data","isPlatformBrowser","isPlatformServer","setCache","getFromCache","Error","remove","from","Promise","resolve","set","Injectable","TransferState","HttpClient","Object","decorators","type","Inject","args","PLATFORM_ID","TransferHttpModule","NgModule","providers"],"mappings":"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","sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) {}\n\n  request<T>(\n    method: string,\n    uri: string | Request,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request<T>(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('get', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.get<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'post',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any) => {\n        return this.httpClient.post<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put<T>(\n    url: string,\n    _body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>('put', url, _body, options, (_method: string, url: string, _body: any, options: any) => {\n      return this.httpClient.put<T>(url, _body, options);\n    });\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('delete', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.delete<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'patch',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any): Observable<any> => {\n        return this.httpClient.patch<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('head', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.head<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n          [header: string]: string | string[];\n        };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n          [param: string]: string | string[];\n        };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(\n      'options',\n      url,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, options: any) => {\n        return this.httpClient.options<T>(url, options);\n      },\n    );\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData<T>(\n    method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey = url + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(method, uri, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private getPostData<T>(\n    _method: string,\n    uri: string | Request,\n    body: any,\n    options: any,\n    callback: (method: string, uri: string | Request, body: any, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey =\n      url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(_method, uri, body, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private resolveData<T>(key: StateKey<T>): Observable<T> {\n    const data = this.getFromCache<T>(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve<T>(data));\n  }\n\n  private setCache<T>(key: StateKey<T>, data: T): void {\n    return this.transferState.set<T>(key, data);\n  }\n\n  private getFromCache<T>(key: StateKey<T>): T {\n    return this.transferState.get<T>(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService],\n})\nexport class TransferHttpModule {}\n"]}