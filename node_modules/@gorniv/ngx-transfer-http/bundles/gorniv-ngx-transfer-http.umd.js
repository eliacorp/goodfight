(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@gorniv/ngx-transfer-http', ['exports', '@angular/core', '@angular/common/http', '@angular/platform-browser', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global.gorniv = global.gorniv || {}, global.gorniv['ngx-transfer-http'] = {}),global.ng.core,global.ng.common.http,global.ng.platformBrowser,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,http,platformBrowser,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TransferHttpService = (function () {
        function TransferHttpService(transferState, httpClient, platformId) {
            this.transferState = transferState;
            this.httpClient = httpClient;
            this.platformId = platformId;
        }
        /**
         * @param {?} method
         * @param {?} uri
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.request = /**
         * @param {?} method
         * @param {?} uri
         * @param {?=} options
         * @return {?}
         */
            function (method, uri, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData(method, uri, options, function (method, url, options) {
                    return _this.httpClient.request(method, url, options);
                });
            };
        /**
         * Performs a request with `get` http method.
         */
        /**
         * Performs a request with `get` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.get = /**
         * Performs a request with `get` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData('get', url, options, function (method, url, options) {
                    return _this.httpClient.get(url, options);
                });
            };
        /**
         * Performs a request with `post` http method.
         */
        /**
         * Performs a request with `post` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.post = /**
         * Performs a request with `post` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getPostData('post', url, body, options, function (url, body, options) {
                    return _this.httpClient.post(url, body, options);
                });
            };
        /**
         * Performs a request with `put` http method.
         */
        /**
         * Performs a request with `put` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.put = /**
         * Performs a request with `put` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData('put', url, options, function (method, url, options) {
                    return _this.httpClient.put(url, options);
                });
            };
        /**
         * Performs a request with `delete` http method.
         */
        /**
         * Performs a request with `delete` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.delete = /**
         * Performs a request with `delete` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData('delete', url, options, function (method, url, options) {
                    return _this.httpClient.delete(url, options);
                });
            };
        /**
         * Performs a request with `patch` http method.
         */
        /**
         * Performs a request with `patch` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.patch = /**
         * Performs a request with `patch` http method.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getPostData('patch', url, body, options, function (url, body, options) {
                    return _this.httpClient.patch(url, body, options);
                });
            };
        /**
         * Performs a request with `head` http method.
         */
        /**
         * Performs a request with `head` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.head = /**
         * Performs a request with `head` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData('head', url, options, function (method, url, options) {
                    return _this.httpClient.head(url, options);
                });
            };
        /**
         * Performs a request with `options` http method.
         */
        /**
         * Performs a request with `options` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.options = /**
         * Performs a request with `options` http method.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                var _this = this;
                // tslint:disable-next-line:no-shadowed-variable
                return this.getData('options', url, options, function (method, url, options) {
                    return _this.httpClient.options(url, options);
                });
            };
        /**
         * @param {?} method
         * @param {?} uri
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        TransferHttpService.prototype.getData = /**
         * @param {?} method
         * @param {?} uri
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
            function (method, uri, options, callback) {
                var _this = this;
                var /** @type {?} */ url = uri;
                if (typeof uri !== 'string') {
                    url = uri.url;
                }
                var /** @type {?} */ key = url + (options ? JSON.stringify(options) : '');
                try {
                    return this.resolveData(key);
                }
                catch (e) {
                    return callback(method, uri, options)
                        .pipe(operators.tap(function (data) {
                        if (common.isPlatformBrowser(_this.platformId)) ;
                        if (common.isPlatformServer(_this.platformId)) {
                            _this.setCache(key, data);
                        }
                    }));
                }
            };
        /**
         * @param {?} method
         * @param {?} uri
         * @param {?} body
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        TransferHttpService.prototype.getPostData = /**
         * @param {?} method
         * @param {?} uri
         * @param {?} body
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
            function (method, uri, body, options, callback) {
                var _this = this;
                var /** @type {?} */ url = uri;
                if (typeof uri !== 'string') {
                    url = uri.url;
                }
                var /** @type {?} */ key = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
                try {
                    return this.resolveData(key);
                }
                catch (e) {
                    return callback(uri, body, options)
                        .pipe(operators.tap(function (data) {
                        if (common.isPlatformBrowser(_this.platformId)) ;
                        if (common.isPlatformServer(_this.platformId)) {
                            _this.setCache(key, data);
                        }
                    }));
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        TransferHttpService.prototype.resolveData = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var /** @type {?} */ data = this.getFromCache(key);
                if (!data) {
                    throw new Error();
                }
                if (common.isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    this.transferState.remove(key);
                }
                if (common.isPlatformServer(this.platformId)) ;
                return rxjs.from(Promise.resolve(data));
            };
        /**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        TransferHttpService.prototype.setCache = /**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
            function (key, data) {
                return this.transferState.set(key, data);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        TransferHttpService.prototype.getFromCache = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.transferState.get(key, null);
            };
        TransferHttpService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        TransferHttpService.ctorParameters = function () {
            return [
                { type: platformBrowser.TransferState, },
                { type: http.HttpClient, },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
            ];
        };
        return TransferHttpService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TransferHttpModule = (function () {
        function TransferHttpModule() {
        }
        TransferHttpModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [TransferHttpService]
                    },] },
        ];
        return TransferHttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.TransferHttpModule = TransferHttpModule;
    exports.TransferHttpService = TransferHttpService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,